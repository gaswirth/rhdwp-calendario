import FullCalendar, { Component } from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";

// const postsRouteBase = "http://localhost/wp-json/calendario/v1/posts/";
// const statuses = [
// 	{
// 		status: "publish",
// 		color: "blue",
// 	},
// 	{
// 		status: "future",
// 		color: "green",
// 	},
// 	{
// 		status: "draft",
// 		color: "gray",
// 	},
// 	{
// 		status: "pending",
// 		color: "red",
// 	},
// ];

export default class Calendar extends Component {
	constructor(props) {
		super(props);

		this.state = {
			monthOffset: 0,
		};

		this.incrementMonthOffset = this.incrementMonthOffset.bind(this);
		this.decrementMonthOffset = this.decrementMonthOffset.bind(this);
	}

	componentDidMount() {
		this.setState({ monthOffset: 0 });


	}

	getFirstOfMonth(date, i) {
		date.setDate(1);
		date.setMonth(date.getMonth() + i);
		return date;
	}

	incrementMonthOffset = () => {
		this.setState(state => {
			return { monthOffset: state.monthOffset + 1 };
		});

		console.log("increment", this.state.monthOffset);
	};

	decrementMonthOffset = () => {
		this.setState((state) => {
			return { monthOffset: state.monthOffset - 1 };
		});

		console.log("decrement", this.state.monthOffset);
	};

	prepareCalendars() {
		let tempDatesString = "12-01-202/12-24-2020";
		let postsRoute = postsRouteBase + tempDatesString;
		let calendars = [];

		for (let i = 0; i < this.props.months; i++) {
			let month = i + this.state.monthOffset;
			let today = new Date();
			// let initialMonth = this.getFirstOfMonth(today, month);
			let headerToolbar = {
				start: "title",
				center: "",
				right: "",
			};
			if (i <= 0) {
				headerToolbar.right = "customPrev customNext";
			}

			calendars.push(
				<FullCalendar
					key={i}
					plugins={[dayGridPlugin]}
					initialView="dayGridMonth"
					eventSources={statuses.map((item, index) => {
						return {
							url: postsRoute + "/" + item.status,
							color: item.color,
						};
					})}
					initialDate={this.state.month1}
					customButtons={{
						customPrev: {
							text: "<",
							click: this.decrementMonthOffset,
						},
						customNext: {
							text: ">",
							click: this.incrementMonthOffset,
						},
					}}
					headerToolbar={headerToolbar}
				/>
			);
		}

		return calendars;
	}

	render() {
		return this.prepareCalendars();
	}
}
