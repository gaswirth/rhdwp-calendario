{"version":3,"sources":["lib/utils.js","components/StatusFilters.js","components/Header.js","components/Day.js","PostsContext.js","DragContext.js","components/Post.js","lib/updatePost.js","components/PostList.js","components/DayPosts.js","lib/hooks.js","ViewContext.js","components/Calendar.js","components/List.js","components/Main.js","components/Widget.js","components/SidebarInput.js","components/ViewOptions.js","components/UnscheduledDrafts.js","components/EditPost.js","components/Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["routeBase","window","rhdReactPlugin","restBase","postStatuses","dateFormat","filterUnchangedParams","params","post","length","key","omit","StatusFilters","keys","Object","className","map","item","index","color","backgroundColor","name","style","Header","fontStyle","marginBottom","margin","Day","props","dayNumber","monthName","children","PostsContext","createContext","initialPosts","currentPost","id","post_title","post_status","post_date","unscheduled","refetch","dateRange","start","end","scheduled","postsReducer","state","action","type","scheduledPosts","posts","forEach","Date","unscheduledPosts","field","value","DragContext","dragReducer","isDragging","draggedFrom","originalUnscheduledOrder","updatedUnscheduledOrder","draggedTo","Set","arrayMove","initialDrag","Post","allowDrag","order","useContext","postsDispatch","draggedPost","draggedPostDispatch","useState","colors","setColors","date","setDate","useEffect","handleDragStart","e","draggingUnscheduled","currentTarget","parentNode","classList","contains","Number","dataset","handleDragEnd","handleClick","target","classes","push","isEmpty","join","data-index","draggable","isToday","isPast","onDragStart","onDragEnd","onClick","renderPost","initialUpdateState","updateNow","updateReducer","PostList","allowDrop","useReducer","updatePost","updatePostDispatch","url","postData","data","error","a","fetch","method","headers","body","JSON","stringify","response","json","console","log","message","fetchData","handleDragOver","preventDefault","mouseY","pageY","offsetTop","listItems","childNodes","itemCount","handleDrop","format","listProps","onDragOver","onDrop","renderPostList","DayPosts","title","renderEmpty","dayPosts","isSameDay","useDayPosts","renderList","ViewContext","viewReducer","viewMode","monthCount","initialViewOptions","initialCalendarDates","firstOfMonth","startOfMonth","calendarDatesReducer","nextMonth","addMonths","startOfWeek","prevMonth","subMonths","Calendar","calendarDates","calendarDatesDispatch","viewOptions","firstOfViewMonth","lastOfViewMonth","endOfMonth","endDate","endOfWeek","startDate","res","renderDays","useCallback","formattedDay","rows","days","day","i","dayIsFirstDay","isFirstDayOfMonth","dayIsToday","dayIsPast","addDays","renderDaysHeaderRow","textAlign","List","parseISO","endOfDay","Main","Widget","SidebarInput","label","inlineLabel","htmlFor","ViewOptions","viewOptionsDispatch","handleViewModeChange","onChange","checked","min","UnscheduledDrafts","editPostReducer","newDate","EditPost","editMode","setEditMode","editPost","editPostDispatch","allowedStatuses","setAllowedStatuses","exclude","isFuture","statusList","filtered","includes","filterStatusList","values","some","prop","undefined","onSubmit","closeOnScroll","document","selected","disabled","status","Sidebar","renderWidget","App","defaultValue","stickyValue","localStorage","getItem","parse","setValue","setItem","useStickyState","view","setView","onRender","phase","actualDuration","baseDuration","startTime","commitTime","interactions","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appSelector","appAnchorElement","querySelector","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c7dfe996.chunk.js","sourcesContent":["import { omit } from \"lodash\";\n\nexport const routeBase = window.rhdReactPlugin.restBase; // Live URL\n// export const routeBase = \"http://localhost/wp-json/calendario/v1/posts\";\n\nexport const postStatuses = window.rhdReactPlugin.postStatuses; // Live URL\n// export const postStatuses = {\n// \tpublish: {\n// \t\tname: \"Publish\",\n// \t\tbackgroundColor: \"cornflowerblue\",\n// \t\tcolor: \"white\",\n// \t},\n// \tdraft: {\n// \t\tname: \"Draft\",\n// \t\tbackgroundColor: \"silver\",\n// \t\tcolor: \"white\",\n// \t},\n// \tfuture: {\n// \t\tname: \"Future\",\n// \t\tbackgroundColor: \"lightseagreen\",\n// \t\tcolor: \"white\",\n// \t},\n// \tpending: {\n// \t\tname: \"Pending\",\n// \t\tbackgroundColor: \"lightcoral\",\n// \t\tcolor: \"white\",\n// \t},\n// \tprivate: {\n// \t\tname: \"Private\",\n// \t\tbackgroundColor: \"maroon\",\n// \t\tcolor: \"white\",\n// \t},\n// };\n\nexport const samplePosts = {\n\tscheduled: [\n\t\t{\n\t\t\tid: 1,\n\t\t\tpost_title: \"Test Post 1\",\n\t\t\tpost_status: \"draft\",\n\t\t\tpost_date: \"02-15-2021\", // will be more accurate and have post time, as well\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tpost_title: \"Test Post 2\",\n\t\t\tpost_status: \"future\",\n\t\t\tpost_date: \"02-13-2021\", // will be more accurate and have post time, as well\n\t\t},\n\t\t{\n\t\t\tid: 6,\n\t\t\tpost_title: \"Test Post 6\",\n\t\t\tpost_status: \"future\",\n\t\t\tpost_date: \"02-14-2021\", // will be more accurate and have post time, as well\n\t\t},\n\t],\n\tunscheduled: [\n\t\t{\n\t\t\tid: 3,\n\t\t\tpost_title: \"Test Post 3\",\n\t\t\tpost_status: \"draft\",\n\t\t\tpost_date: \"02-16-2021\", // will be more accurate and have post time, as well\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\tpost_title: \"Test Post 4\",\n\t\t\tpost_status: \"pending\",\n\t\t\tpost_date: \"02-22-2021\", // will be more accurate and have post time, as well\n\t\t},\n\t\t{\n\t\t\tid: 5,\n\t\t\tpost_title: \"Test Post 5\",\n\t\t\tpost_status: \"pending\",\n\t\t\tpost_date: \"02-22-2021\", // will be more accurate and have post time, as well\n\t\t},\n\t],\n};\n\nexport const dateFormat = {\n\tday: \"d\",\n\t// date: \"MM-dd-yyyy\",\n\tdate: \"yyyy-MM-dd\",\n\tyear: \"yyyy\",\n\tdayName: \"EEEE\",\n\tmonthName: \"MMMM\",\n\tfullDate: \"EEEE,  MMMM dd, yyyy\",\n};\n\n/**\n * Tests if a post contains ANY empty data (is incomplete/empty post)\n *\n * @param {object} post\n */\nexport function isEmptyPost(post) {\n\treturn Object.values(post).some(\n\t\t(prop) => prop !== null && prop !== \"\" && prop !== undefined\n\t);\n}\n\n/**\n * Produces a filtered list of post status objects.\n *\n * @param {array} exclude keys to exclude.\n * @return {object} The filtered postStatuses object.\n */\nexport function filterStatusList(exclude = []) {\n\tlet filtered = postStatuses;\n\tif (exclude.length > 0) {\n\t\tfor (let key in postStatuses) {\n\t\t\tif (exclude.includes(key)) {\n\t\t\t\tfiltered = omit(filtered, key);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn filtered;\n}\n\n/**\n *\n * @param {object} params  Key/value post parameters to update\n * @param {*} post The post to check against\n * @returns {object} The filtered params object\n */\nexport function filterUnchangedParams(params, post) {\n\tif (params.length > 0) {\n\t\tfor (let key in params) {\n\t\t\tif (params[key] === post[key]) {\n\t\t\t\tparams = omit(params, key);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn params;\n}\n","import React from \"react\";\nimport { postStatuses } from \"../lib/utils\";\n\nexport default function StatusFilters() {\n\tconst keys = Object.keys(postStatuses);\n\n\treturn (\n\t\t<div className=\"statusFilters\">\n\t\t\t<ul className=\"filters\">\n\t\t\t\t{keys.map((item, index) => {\n\t\t\t\t\tconst { color, backgroundColor, name } = postStatuses[item];\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName={`filterItem status__${item}`}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName=\"dot\"\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tcolor,\n\t\t\t\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span className=\"name\">{name}</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport StatusFilters from \"./StatusFilters\";\n\nexport default function Header() {\n\treturn (\n\t\t<header className=\"calendario__header\">\n\t\t\t<h1 className=\"page-title\">Calendario II: The Datening</h1>\n\t\t\t<div className=\"calendario__header__inner\">\n\t\t\t\t<div className=\"left\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tDrag posts back and forth from the{\" \"}\n\t\t\t\t\t\t<strong>Calendar</strong> to the{\" \"}\n\t\t\t\t\t\t<strong>Unscheduled Drafts</strong> area.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p style={{ fontStyle: \"italic\", marginBottom: 0 }}>\n\t\t\t\t\t\tComing soon:\n\t\t\t\t\t</p>\n\t\t\t\t\t<ul style={{ margin: 0 }}>\n\t\t\t\t\t\t<li>Show/hide statuses from filter menu</li>\n\t\t\t\t\t\t<li>Improve DND UI</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"calendario__header__right\">\n\t\t\t\t\t<StatusFilters />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</header>\n\t);\n}\n","import React from \"react\";\n\nexport default function Day(props) {\n\tconst { className, dayNumber, monthName, children } = props;\n\n\treturn (\n\t\t<div className={className}>\n\t\t\t{monthName ? <span className=\"month\">{monthName}</span> : \"\"}\n\t\t\t<span className=\"number\">{dayNumber}</span>\n\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n","import { createContext } from \"react\";\n\nconst PostsContext = createContext({});\nexport default PostsContext;\n\nexport const initialPosts = {\n\tcurrentPost: {\n\t\tid: null,\n\t\tpost_title: \"\",\n\t\tpost_status: \"\",\n\t\tpost_date: \"\",\n\t\tunscheduled: null,\n\t},\n\trefetch: false,\n\tdateRange: {\n\t\tstart: \"\",\n\t\tend: \"\",\n\t},\n\tunscheduled: [],\n\tscheduled: [],\n};\n\nexport function postsReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"SET_SCHEDULED\":\n\t\t\tlet scheduledPosts = action.posts;\n\n\t\t\t// cast the date as a Date object\n\t\t\tscheduledPosts.forEach((post, index) => {\n\t\t\t\tscheduledPosts[index].post_date = new Date(post.post_date);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdateRange: {\n\t\t\t\t\tstart: action.start,\n\t\t\t\t\tend: action.end,\n\t\t\t\t},\n\t\t\t\tscheduled: scheduledPosts,\n\t\t\t};\n\n\t\tcase \"SET_UNSCHEDULED\":\n\t\t\tlet unscheduledPosts = action.posts;\n\n\t\t\t// cast the date as a Date object\n\t\t\tunscheduledPosts.forEach((post, index) => {\n\t\t\t\tunscheduledPosts[index].post_date = new Date(post.post_date);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tunscheduled: unscheduledPosts,\n\t\t\t};\n\n\t\tcase \"REFETCH\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trefetch: !state.refetch,\n\t\t\t};\n\n\t\tcase \"SET_CURRENTPOST\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentPost: {\n\t\t\t\t\t...action.post,\n\t\t\t\t\tunscheduled: action.unscheduled,\n\t\t\t\t},\n\t\t\t};\n\n\t\tcase \"UPDATE_CURRENTPOST_FIELD\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentPost: {\n\t\t\t\t\t...state.currentPost,\n\t\t\t\t\t[action.field]: action.value,\n\t\t\t\t},\n\t\t\t};\n\n\t\t// TODO Not currently used but maybe...\n\t\tcase \"UNSET_CURRENTPOST\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentPost: initialPosts.currentPost,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { createContext } from \"react\";\nimport arrayMove from \"array-move\";\n\nconst DragContext = createContext(null);\nexport default DragContext;\n\nexport function dragReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"START\":\n\t\t\treturn {\n\t\t\t\tpost: action.post,\n\t\t\t\tisDragging: true,\n\t\t\t\tdraggedFrom:\n\t\t\t\t\taction.draggedFrom >= 0 ? action.draggedFrom : false,\n\t\t\t\toriginalUnscheduledOrder: action.originalUnscheduledOrder,\n\t\t\t};\n\n\t\tcase \"DRAGGING_OVER_UNSCHEDULED\":\n\t\t\tlet updatedUnscheduledOrder = state.originalUnscheduledOrder;\n\n\t\t\tif (state.draggedTo === false) {\n\t\t\t\t// for now, just add to end of list.\n\t\t\t\t// TODO: position before/after\n\t\t\t\tupdatedUnscheduledOrder = [\n\t\t\t\t\t...new Set([...state.originalUnscheduledOrder, state.post]),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\t// reordering\n\t\t\t\tlet draggedFrom = null;\n\n\t\t\t\tif (state.draggedFrom === false) {\n\t\t\t\t\tdraggedFrom = updatedUnscheduledOrder.length;\n\n\t\t\t\t\tupdatedUnscheduledOrder = [\n\t\t\t\t\t\t...new Set([\n\t\t\t\t\t\t\t...state.originalUnscheduledOrder,\n\t\t\t\t\t\t\tstate.post,\n\t\t\t\t\t\t]),\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\tdraggedFrom = state.draggedFrom;\n\t\t\t\t}\n\n\t\t\t\tif (draggedFrom !== action.draggedTo) {\n\t\t\t\t\tupdatedUnscheduledOrder = arrayMove(\n\t\t\t\t\t\tupdatedUnscheduledOrder,\n\t\t\t\t\t\tdraggedFrom,\n\t\t\t\t\t\taction.draggedTo\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdraggedTo: action.draggedTo,\n\t\t\t\tupdatedUnscheduledOrder: updatedUnscheduledOrder,\n\t\t\t};\n\n\t\tcase \"END\": {\n\t\t\treturn initialDrag;\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const initialDrag = {\n\tpost: {},\n\tisDragging: false,\n\tdraggedFrom: null,\n\tdraggedTo: null,\n\toriginalUnscheduledOrder: [],\n\tupdatedUnscheduledOrder: [],\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { postStatuses } from \"../lib/utils\";\nimport { isEmpty } from \"lodash\";\nimport { isPast, isToday } from \"date-fns\";\n\nimport PostsContext from \"../PostsContext\";\nimport DragContext from \"../DragContext\";\n\nexport default function Post({ post, index, allowDrag, order }) {\n\tconst {\n\t\tposts: { currentPost },\n\t\tpostsDispatch,\n\t} = useContext(PostsContext);\n\tconst { draggedPost, draggedPostDispatch } = useContext(DragContext);\n\tconst [colors, setColors] = useState({});\n\tconst [date, setDate] = useState(new Date());\n\n\tuseEffect(() => {\n\t\tsetDate(new Date(post.post_date));\n\t}, [post.post_date]);\n\n\tuseEffect(() => {\n\t\tsetColors({\n\t\t\tcolor: postStatuses[post.post_status].color,\n\t\t\tbackgroundColor: postStatuses[post.post_status].backgroundColor,\n\t\t});\n\t}, [post.post_status]);\n\n\tconst handleDragStart = (e) => {\n\t\tlet draggingUnscheduled = e.currentTarget.parentNode.classList.contains(\n\t\t\t\"unscheduledDrafts\"\n\t\t)\n\t\t\t? true\n\t\t\t: false;\n\n\t\tdraggedPostDispatch({\n\t\t\ttype: \"START\",\n\t\t\tpost: post,\n\t\t\tdraggedFrom: draggingUnscheduled\n\t\t\t\t? Number(e.currentTarget.dataset.index)\n\t\t\t\t: false,\n\t\t\toriginalUnscheduledOrder: order,\n\t\t});\n\t};\n\n\tconst handleDragEnd = () => draggedPostDispatch({ type: \"END\" });\n\n\tconst handleClick = (e) => {\n\t\tlet unscheduled =\n\t\t\te.target.classList.contains(\"unscheduledDrafts\") ||\n\t\t\te.target.parentNode.classList.contains(\"unscheduledDrafts\")\n\t\t\t\t? true\n\t\t\t\t: false;\n\n\t\tpostsDispatch({\n\t\t\ttype: \"SET_CURRENTPOST\",\n\t\t\tpost: post,\n\t\t\tunscheduled: unscheduled,\n\t\t});\n\t};\n\n\tconst renderPost = () => {\n\t\tlet classes = [\n\t\t\t\"post\",\n\t\t\t`post-id-${post.id} status__${post.post_status}`,\n\t\t];\n\t\tif (draggedPost.isDragging) {\n\t\t\tif (\n\t\t\t\tdraggedPost.draggedTo === Number(index) &&\n\t\t\t\tdraggedPost.draggedTo !== draggedPost.draggedFrom\n\t\t\t) {\n\t\t\t\tclasses.push(\"dropArea\");\n\t\t\t}\n\n\t\t\tif (draggedPost.draggedFrom === Number(index)) {\n\t\t\t\tclasses.push(\"dragging\");\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmpty(currentPost) && currentPost.id === post.id) {\n\t\t\tclasses.push(\"currentPost\");\n\t\t}\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={classes.join(\" \")}\n\t\t\t\tdata-index={index}\n\t\t\t\tdraggable={\n\t\t\t\t\tallowDrag === true || (!isToday(date) && !isPast(date))\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: false\n\t\t\t\t}\n\t\t\t\tonDragStart={handleDragStart}\n\t\t\t\tonDragEnd={handleDragEnd}\n\t\t\t\tonClick={handleClick}\n\t\t\t>\n\t\t\t\t<p\n\t\t\t\t\tclassName=\"postData\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: colors.backgroundColor,\n\t\t\t\t\t\tcolor: colors.color,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{post.post_title}\n\t\t\t\t</p>\n\t\t\t</li>\n\t\t);\n\t};\n\n\treturn post ? renderPost() : null;\n}\n","export const initialUpdateState = {\n\tupdateNow: false,\n\tparams: {},\n\tunscheduled: false,\n};\n\nexport function updateReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"UPDATE\":\n\t\t\treturn {\n\t\t\t\tupdateNow: true,\n\t\t\t\tparams: action.params,\n\t\t\t\tunscheduled: action.unscheduled,\n\t\t\t};\n\n\t\tcase \"UPDATING\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tupdateNow: false,\n\t\t\t};\n\n\t\tcase \"COMPLETE\":\n\t\t\treturn initialUpdateState;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React, { useContext, useEffect, useReducer } from \"react\";\nimport Post from \"./Post\";\nimport { dateFormat, routeBase, filterUnchangedParams } from \"../lib/utils\";\nimport { updateReducer, initialUpdateState } from \"../lib/updatePost\";\nimport { format } from \"date-fns\";\nimport { isEmpty } from \"lodash\";\n\nimport PostsContext from \"../PostsContext\";\nimport DragContext from \"../DragContext\";\n\nexport default function PostList({\n\tposts,\n\tclassName,\n\tallowDrag,\n\tallowDrop,\n\tdate,\n}) {\n\tconst {\n\t\tposts: { currentPost },\n\t\tpostsDispatch,\n\t} = useContext(PostsContext);\n\tconst {\n\t\tdraggedPost: { post },\n\t\tdraggedPostDispatch,\n\t} = useContext(DragContext);\n\tconst [updatePost, updatePostDispatch] = useReducer(\n\t\tupdateReducer,\n\t\tinitialUpdateState\n\t);\n\n\tuseEffect(() => {\n\t\tif (updatePost.updateNow === true && post.id !== \"undefined\") {\n\t\t\tupdatePostDispatch({\n\t\t\t\ttype: \"UPDATING\",\n\t\t\t});\n\n\t\t\tlet url = `${routeBase}/update/${post.id}`;\n\t\t\tlet postData = {\n\t\t\t\tparams: filterUnchangedParams(updatePost.params, post),\n\t\t\t\tunscheduled: updatePost.unscheduled,\n\t\t\t};\n\n\t\t\tif (isEmpty(postData)) {\n\t\t\t\treturn { data: \"Update not necessary.\", error: true };\n\t\t\t}\n\n\t\t\tconst fetchData = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(url, {\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: JSON.stringify(postData),\n\t\t\t\t\t});\n\t\t\t\t\t// const data = await response.json(); // If you need to catch the response...\n\t\t\t\t\tawait response.json();\n\n\t\t\t\t\tpostsDispatch({\n\t\t\t\t\t\ttype: \"REFETCH\",\n\t\t\t\t\t});\n\t\t\t\t\tdraggedPostDispatch({\n\t\t\t\t\t\ttype: \"END\",\n\t\t\t\t\t});\n\t\t\t\t\tupdatePostDispatch({\n\t\t\t\t\t\ttype: \"COMPLETE\",\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfetchData();\n\t\t}\n\t}, [updatePost, draggedPostDispatch, post, postsDispatch]);\n\n\tconst handleDragOver = (e) => {\n\t\te.preventDefault();\n\n\t\tif (allowDrag !== false) {\n\t\t\tif (e.currentTarget.classList.contains(\"unscheduledDrafts\")) {\n\t\t\t\tlet draggedTo = e.target.dataset.index\n\t\t\t\t\t? Number(e.target.dataset.index)\n\t\t\t\t\t: false;\n\n\t\t\t\tif (draggedTo === false) {\n\t\t\t\t\tlet mouseY = e.pageY - e.currentTarget.offsetTop;\n\t\t\t\t\tconst listItems = e.currentTarget.childNodes;\n\t\t\t\t\tlet itemCount = listItems.length;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tlistItems.length === 0 ||\n\t\t\t\t\t\tmouseY < listItems[0].offsetTop\n\t\t\t\t\t) {\n\t\t\t\t\t\tdraggedTo = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdraggedTo = itemCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdraggedPostDispatch({\n\t\t\t\t\ttype: \"DRAGGING_OVER_UNSCHEDULED\",\n\t\t\t\t\tdraggedTo: draggedTo,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleDrop = () => {\n\t\tif (allowDrop !== false) {\n\t\t\tupdatePostDispatch({\n\t\t\t\ttype: \"UPDATE\",\n\t\t\t\tparams: {\n\t\t\t\t\tpost_date:\n\t\t\t\t\t\tdate === false\n\t\t\t\t\t\t\t? format(post.post_date, dateFormat.date)\n\t\t\t\t\t\t\t: format(date, dateFormat.date),\n\t\t\t\t},\n\t\t\t\tunscheduled: date === false ? true : false,\n\t\t\t});\n\n\t\t\tif (currentPost.id === post.id) {\n\t\t\t\tpostsDispatch({\n\t\t\t\t\ttype: \"UPDATE_CURRENTPOST_FIELD\",\n\t\t\t\t\tfield: \"post_date\",\n\t\t\t\t\tvalue: date,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tconst renderPostList = () => {\n\t\tlet listProps = {\n\t\t\tclassName: `postList ${className}`,\n\t\t\tonDragOver: handleDragOver,\n\t\t};\n\n\t\tif (allowDrop !== false) {\n\t\t\tlistProps.onDrop = handleDrop;\n\t\t} else {\n\t\t\tlistProps.className += \" dropDisabled\";\n\t\t}\n\n\t\t// if (!isToday(date) && !isPast(date)) {\n\t\t// \tlistProps.onDrop = handleDrop;\n\t\t// } else {\n\t\t// \tlistProps.className += \" dropDisabled\";\n\t\t// }\n\n\t\treturn (\n\t\t\t<ul {...listProps}>\n\t\t\t\t{posts.map((post, index) => (\n\t\t\t\t\t<Post\n\t\t\t\t\t\tpost={post}\n\t\t\t\t\t\torder={posts}\n\t\t\t\t\t\tkey={post.id}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\tallowDrag={allowDrag}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t);\n\t};\n\n\treturn renderPostList();\n}\n","import React from \"react\";\nimport PostList from \"./PostList\";\nimport { useDayPosts } from \"../lib/hooks\";\nimport { isToday, isPast } from \"date-fns\";\n\nexport default function DayPosts({\n\tposts,\n\tdate,\n\tallowDrag,\n\tallowDrop,\n\ttitle,\n\trenderEmpty,\n}) {\n\tconst dayPosts = useDayPosts(posts, date);\n\n\tconst renderPostList = () => {\n\t\tif ((dayPosts && dayPosts.length > 0) || renderEmpty === true) {\n\t\t\tlet listProps = {\n\t\t\t\tclassName: \"calendarPosts\", // make this a prop/change conditionally\n\t\t\t\tdate: date,\n\t\t\t\tposts: dayPosts,\n\t\t\t};\n\n\t\t\t// Drag control\n\t\t\tif (allowDrag !== \"undefined\" && allowDrag !== null) {\n\t\t\t\tlistProps.allowDrag = allowDrag;\n\t\t\t}\n\n\t\t\t// Drop control\n\t\t\tif (!isToday(date) && !isPast(date) && allowDrop !== false) {\n\t\t\t\tlistProps.allowDrop = true;\n\t\t\t} else {\n\t\t\t\tlistProps.allowDrop = false;\n\t\t\t}\n\n\t\t\tconst renderList = <PostList {...listProps} />;\n\n\t\t\tif (title) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"listDay\">\n\t\t\t\t\t\t<h4 className=\"listDay__title\">{title}</h4>\n\t\t\t\t\t\t{renderList}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn renderList;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\treturn renderPostList();\n}\n","import { useState, useEffect /*useRef,*/ /*useReducer*/ } from \"react\";\nimport { /*format,*/ isSameDay } from \"date-fns\";\n// import { routeBase, dateFormat } from \"../lib/utils\";\n\nexport const useStickyState = (defaultValue, key) => {\n\tconst [value, setValue] = useState(() => {\n\t\tconst stickyValue = window.localStorage.getItem(key);\n\t\treturn stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n\t});\n\n\tuseEffect(() => {\n\t\twindow.localStorage.setItem(key, JSON.stringify(value));\n\t}, [key, value]);\n\treturn [value, setValue];\n};\n\nexport const useDayPosts = (posts, date) => {\n\tlet dayPosts = [];\n\tif (posts) {\n\t\tposts.forEach((post) => {\n\t\t\tif (isSameDay(date, new Date(post.post_date))) {\n\t\t\t\tdayPosts.push(post);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dayPosts;\n};\n\n// export const useFetchPosts = (\n// \tscheduled = false,\n// \tparams = { start: null, end: null }\n// ) => {\n// \t// const cache = useRef({});\n// \tconst postBase = scheduled === true ? \"calendar\" : \"unscheduled\";\n// \tconst initialState = {\n// \t\tstatus: \"idle\",\n// \t\terror: null,\n// \t\tdata: [],\n// \t};\n// \tconst [state, dispatch] = useReducer((state, action) => {\n// \t\tswitch (action.type) {\n// \t\t\tcase \"FETCHING\":\n// \t\t\t\treturn { ...state, status: \"fetching\" };\n\n// \t\t\tcase \"FETCHED\":\n// \t\t\t\treturn {\n// \t\t\t\t\t...state,\n// \t\t\t\t\tstatus: \"fetched\",\n// \t\t\t\t\tdata: action.data,\n// \t\t\t\t};\n\n// \t\t\tcase \"FETCH_ERROR\":\n// \t\t\t\treturn { ...state, status: \"error\", error: action.data };\n\n// \t\t\tdefault:\n// \t\t\t\treturn state;\n// \t\t}\n// \t}, initialState);\n// \tlet url = `${routeBase}/${postBase}`;\n\n// \tif (scheduled === true) {\n// \t\tconst startDate = format(params.start, dateFormat.date);\n// \t\tconst endDate =\n// \t\t\tparams.end !== null ? format(params.end, dateFormat.date) : null;\n\n// \t\turl = `${url}/${startDate}/${endDate}`;\n// \t}\n\n// \tuseEffect(() => {\n// \t\tlet cancelRequest = false;\n\n// \t\tconst fetchData = async () => {\n// \t\t\tdispatch({ type: \"FETCHING\" });\n\n// \t\t\t// if (cache.current[url]) {\n// \t\t\t// const data = cache.current[url];\n// \t\t\t// dispatch({ type: \"FETCHED\", data: data });\n// \t\t\t// } else {\n// \t\t\ttry {\n// \t\t\t\tconst response = await fetch(url);\n// \t\t\t\tconst data = await response.json();\n// \t\t\t\t// cache.current[url] = data; // set response in cache;\n// \t\t\t\tdispatch({ type: \"FETCHED\", data: data });\n// \t\t\t} catch (error) {\n// \t\t\t\tif (cancelRequest) return;\n// \t\t\t\tdispatch({ type: \"FETCH_ERROR\", data: error.message });\n// \t\t\t}\n// \t\t\t// }\n// \t\t};\n\n// \t\tfetchData();\n\n// \t\treturn function cleanup() {\n// \t\t\tcancelRequest = true;\n// \t\t};\n// \t}, [url, postBase]);\n\n// \treturn state;\n// };\n","import { createContext } from \"react\";\n\nconst ViewContext = createContext({});\nexport default ViewContext;\n\nexport function viewReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"UPDATE_OPTION\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tviewMode: action.viewMode ? action.viewMode : state.viewMode,\n\t\t\t\tmonthCount: action.monthCount\n\t\t\t\t\t? action.monthCount\n\t\t\t\t\t: state.monthCount,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const initialViewOptions = {\n\tviewMode: \"calendar\",\n\tmonthCount: 1,\n};\n","// TODO Refactor or subdivide this component further\nimport React, { useReducer, useContext, useEffect, useCallback } from \"react\";\nimport Day from \"./Day\";\nimport DayPosts from \"./DayPosts\";\nimport {\n\tformat,\n\tisPast,\n\tisToday,\n\taddDays,\n\taddMonths,\n\tsubMonths,\n\tstartOfWeek,\n\tstartOfMonth,\n\tendOfMonth,\n\tendOfWeek,\n\tisFirstDayOfMonth,\n} from \"date-fns\";\n\nimport { dateFormat, routeBase } from \"../lib/utils\";\n\nimport PostsContext from \"../PostsContext\";\nimport ViewContext from \"../ViewContext\";\n\nconst initialCalendarDates = {\n\tstart: new Date(),\n\tend: new Date(),\n\tfirstOfMonth: startOfMonth(new Date()),\n};\n\nfunction calendarDatesReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"START\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.start,\n\t\t\t\tfirstOfMonth: action.firstOfMonth,\n\t\t\t};\n\n\t\tcase \"END\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tend: action.end,\n\t\t\t};\n\n\t\tcase \"NEXT_MONTH\":\n\t\t\tlet nextMonth = startOfMonth(addMonths(state.firstOfMonth, 1));\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: startOfWeek(nextMonth),\n\t\t\t\tfirstOfMonth: nextMonth,\n\t\t\t};\n\n\t\tcase \"PREV_MONTH\":\n\t\t\tlet prevMonth = startOfMonth(subMonths(state.firstOfMonth, 1));\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: startOfWeek(prevMonth),\n\t\t\t\tfirstOfMonth: prevMonth,\n\t\t\t};\n\n\t\tcase \"RESET\":\n\t\t\treturn initialCalendarDates;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default function Calendar() {\n\tconst {\n\t\tposts: { scheduled, refetch },\n\t\tpostsDispatch,\n\t} = useContext(PostsContext);\n\tconst [calendarDates, calendarDatesDispatch] = useReducer(\n\t\tcalendarDatesReducer,\n\t\tinitialCalendarDates\n\t);\n\tconst {\n\t\tviewOptions: { monthCount },\n\t} = useContext(ViewContext);\n\n\tuseEffect(() => {\n\t\tcalendarDatesDispatch({\n\t\t\ttype: \"START\",\n\t\t\tstart: startOfWeek(startOfMonth(new Date())), // make this the first day viewed on the calendar, not necessarily always going to be 1st of month\n\t\t\tfirstOfMonth: startOfMonth(new Date()),\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tpostsDispatch({\n\t\t\ttype: \"REFETCH\",\n\t\t});\n\t}, [postsDispatch]);\n\n\tuseEffect(() => {\n\t\t// Set the fetch range\n\t\tconst firstOfViewMonth = startOfMonth(calendarDates.start);\n\t\tconst lastOfViewMonth = endOfMonth(\n\t\t\taddMonths(firstOfViewMonth, monthCount)\n\t\t);\n\t\tconst endDate = endOfWeek(lastOfViewMonth);\n\n\t\t// Calculate the end date whenever calendarDates.start or monthCount updates!\n\t\tcalendarDatesDispatch({\n\t\t\ttype: \"END\",\n\t\t\tend: endDate,\n\t\t});\n\t}, [refetch, calendarDates.start, monthCount]);\n\n\tuseEffect(() => {\n\t\tif (calendarDates.start !== null && calendarDates.end !== null) {\n\t\t\tlet startDate = format(calendarDates.start, dateFormat.date);\n\t\t\tlet endDate = format(calendarDates.end, dateFormat.date);\n\t\t\tlet url = `${routeBase}/scheduled/${startDate}/${endDate}`;\n\t\t\tconst fetchData = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await fetch(url);\n\t\t\t\t\tconst data = await res.json();\n\n\t\t\t\t\tpostsDispatch({\n\t\t\t\t\t\ttype: \"SET_SCHEDULED\",\n\t\t\t\t\t\tposts: data.posts,\n\t\t\t\t\t\tstart: data.dateRange.start,\n\t\t\t\t\t\tend: data.dateRange.end,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(\"REST error\", error.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfetchData();\n\t\t}\n\t}, [postsDispatch, calendarDates.start, calendarDates.end]);\n\n\tconst nextMonth = () => {\n\t\tcalendarDatesDispatch({\n\t\t\ttype: \"NEXT_MONTH\",\n\t\t});\n\t};\n\n\tconst prevMonth = () => {\n\t\tcalendarDatesDispatch({\n\t\t\ttype: \"PREV_MONTH\",\n\t\t});\n\t};\n\n\tconst renderCalendarHeader = () => {\n\t\treturn (\n\t\t\t<div className=\"header row flex-middle\">\n\t\t\t\t<div className=\"col col__start\">\n\t\t\t\t\t<div className=\"icon\" onClick={prevMonth}>\n\t\t\t\t\t\tchevron_left\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col col__center\">\n\t\t\t\t\t<h3 className=\"viewTitle\">Scheduled Posts</h3>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col col__end\" onClick={nextMonth}>\n\t\t\t\t\t<div className=\"icon\">chevron_right</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n\n\tconst renderDaysHeaderRow = () => {\n\t\tconst days = [];\n\n\t\tlet startDate = startOfWeek(calendarDates.start);\n\n\t\tfor (let i = 0; i < 7; i++) {\n\t\t\tdays.push(\n\t\t\t\t<div className=\"col col__center\" key={i}>\n\t\t\t\t\t{format(addDays(startDate, i), dateFormat.dayName)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn <div className=\"days row\">{days}</div>;\n\t};\n\n\tconst renderDays = useCallback(() => {\n\t\tconst rows = [];\n\n\t\tlet days = [];\n\t\tlet day = calendarDates.start;\n\t\tlet formattedDay;\n\n\t\twhile (day <= calendarDates.end) {\n\t\t\tfor (let i = 0; i < 7; i++) {\n\t\t\t\tconst dayIsFirstDay = isFirstDayOfMonth(day);\n\t\t\t\tconst dayIsToday = isToday(day);\n\t\t\t\tconst dayIsPast = isPast(day);\n\n\t\t\t\t// even/odd month\n\t\t\t\t// if (dayIsFirstDay) {\n\t\t\t\t// \tisMonthEven = !isMonthEven;\n\t\t\t\t// }\n\n\t\t\t\tformattedDay = format(day, dateFormat.day);\n\n\t\t\t\tvar classes = [];\n\t\t\t\tif (dayIsToday) {\n\t\t\t\t\tclasses.push(\"today\");\n\t\t\t\t}\n\t\t\t\t// else {\n\t\t\t\t// \tclasses.push(isMonthEven ? \"even\" : \"odd\");\n\t\t\t\t// }\n\n\t\t\t\tif (dayIsPast && !dayIsToday) {\n\t\t\t\t\tclasses.push(\"past\");\n\t\t\t\t}\n\n\t\t\t\tdays.push(\n\t\t\t\t\t<Day\n\t\t\t\t\t\tclassName={`col cell ${classes.join(\" \")}`}\n\t\t\t\t\t\tkey={day}\n\t\t\t\t\t\tday={day}\n\t\t\t\t\t\tdayNumber={formattedDay}\n\t\t\t\t\t\tmonthName={\n\t\t\t\t\t\t\tdayIsFirstDay\n\t\t\t\t\t\t\t\t? format(day, dateFormat.monthName)\n\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DayPosts\n\t\t\t\t\t\t\tdate={day}\n\t\t\t\t\t\t\tposts={scheduled}\n\t\t\t\t\t\t\tallowDrag={true}\n\t\t\t\t\t\t\trenderEmpty={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Day>\n\t\t\t\t);\n\n\t\t\t\tday = addDays(day, 1);\n\t\t\t}\n\n\t\t\trows.push(\n\t\t\t\t<div className=\"row\" key={day}>\n\t\t\t\t\t{days}\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tdays = [];\n\t\t}\n\t\treturn <div className=\"body\">{rows}</div>;\n\t}, [calendarDates.end, calendarDates.start, scheduled]);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"view view__calendar\">\n\t\t\t\t{renderCalendarHeader()}\n\t\t\t\t{renderDaysHeaderRow()}\n\t\t\t\t{renderDays()}\n\t\t\t</div>\n\t\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t\tMaybe a big + to add a month?\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, { useContext, useEffect } from \"react\";\nimport DayPosts from \"./DayPosts\";\nimport { format, addDays, endOfDay, parseISO } from \"date-fns\";\nimport { routeBase, dateFormat } from \"../lib/utils\";\n\nimport PostsContext from \"../PostsContext\";\n\nexport default function List() {\n\tconst {\n\t\tposts: { scheduled, refetch, dateRange },\n\t\tpostsDispatch,\n\t} = useContext(PostsContext);\n\n\tuseEffect(() => {\n\t\tpostsDispatch({\n\t\t\ttype: \"REFETCH\",\n\t\t});\n\t}, [postsDispatch]);\n\n\tuseEffect(() => {\n\t\tlet startDate = format(new Date(), dateFormat.date); // Start from today\n\n\t\tlet url = `${routeBase}/scheduled/${startDate}`;\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await fetch(url);\n\t\t\t\tconst data = await res.json();\n\n\t\t\t\tpostsDispatch({\n\t\t\t\t\ttype: \"SET_SCHEDULED\",\n\t\t\t\t\tposts: data.posts,\n\t\t\t\t\tstart: data.dateRange.start,\n\t\t\t\t\tend: data.dateRange.end,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\"REST error\", error.message);\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\t}, [postsDispatch, refetch]);\n\n\tconst renderDays = () => {\n\t\tlet days = [];\n\t\tlet day = parseISO(dateRange.start);\n\n\t\tif (\n\t\t\tdateRange.end !== \"undefined\" &&\n\t\t\tdateRange.end !== null &&\n\t\t\tdateRange.end\n\t\t) {\n\t\t\twhile (endOfDay(day) <= endOfDay(new Date(dateRange.end))) {\n\t\t\t\tdays.push(\n\t\t\t\t\t<DayPosts\n\t\t\t\t\t\tkey={day}\n\t\t\t\t\t\tdate={day}\n\t\t\t\t\t\tposts={scheduled}\n\t\t\t\t\t\trenderEmpty={false}\n\t\t\t\t\t\tallowDrag={true}\n\t\t\t\t\t\tallowDrop={false}\n\t\t\t\t\t\ttitle={format(day, dateFormat.fullDate)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\t\tday = addDays(day, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn days;\n\t};\n\n\treturn (\n\t\t<div className=\"view view__list\">\n\t\t\t<header className=\"header\">\n\t\t\t\t<h3 className=\"viewTitle\">Upcoming Posts </h3>\n\t\t\t</header>\n\n\t\t\t{renderDays()}\n\t\t</div>\n\t);\n}\n","import React, { useContext } from \"react\";\nimport Calendar from \"./Calendar\";\nimport List from \"./List\";\n\nimport ViewContext from \"../ViewContext\";\n\nexport default function Main() {\n\tconst {\n\t\tviewOptions: { viewMode },\n\t} = useContext(ViewContext);\n\n\treturn (\n\t\t<main className=\"calendario__main\">\n\t\t\t{viewMode === \"calendar\" ? <Calendar /> : <List />}\n\t\t</main>\n\t);\n}\n","import React from \"react\";\n\nexport default function Widget({ title, className, children }) {\n\treturn (\n\t\t<div className={`widget ${className}`}>\n\t\t\t<h3 className=\"widgetTitle\">{title}</h3>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport default function SidebarInput({ name, label, inlineLabel, children }) {\n\tconst renderInput = () => {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={`sidebarInput fieldGroup fieldGroup__${name} ${\n\t\t\t\t\tinlineLabel ? \"inlineLabel\" : \"\"\n\t\t\t\t}`}\n\t\t\t>\n\t\t\t\t{label ? <label htmlFor={name}>{label}</label> : null}\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn renderInput();\n}\n","import React, { useContext } from \"react\";\nimport SidebarInput from \"./SidebarInput\";\n\nimport ViewContext from \"../ViewContext\";\nimport PostsContext from \"../PostsContext\";\n\nexport default function ViewOptions() {\n\tconst {\n\t\tviewOptions: { viewMode, monthCount },\n\t\tviewOptionsDispatch,\n\t} = useContext(ViewContext);\n\n\tconst { postsDispatch } = useContext(PostsContext);\n\n\tconst handleMonthCountChange = (e) => {\n\t\tviewOptionsDispatch({\n\t\t\ttype: \"UPDATE_OPTION\",\n\t\t\tmonthCount: e.target.value,\n\t\t});\n\t};\n\n\tconst handleViewModeChange = (e) => {\n\t\tviewOptionsDispatch({\n\t\t\ttype: \"UPDATE_OPTION\",\n\t\t\tviewMode: e.target.value,\n\t\t});\n\t};\n\n\tconst handleRefetch = (e) => {\n\t\tpostsDispatch({\n\t\t\ttype: \"REFETCH\",\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"viewOptions\">\n\t\t\t<SidebarInput name=\"viewMode\" label=\"View Mode\">\n\t\t\t\t<div className=\"options\">\n\t\t\t\t\t<label htmlFor=\"calendar\">Calendar</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\tname=\"viewMode\"\n\t\t\t\t\t\tonChange={handleViewModeChange}\n\t\t\t\t\t\tchecked={viewMode === \"calendar\"}\n\t\t\t\t\t\tvalue=\"calendar\"\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"list\">List</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\tname=\"viewMode\"\n\t\t\t\t\t\tonChange={handleViewModeChange}\n\t\t\t\t\t\tchecked={viewMode === \"list\"}\n\t\t\t\t\t\tvalue=\"list\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</SidebarInput>\n\t\t\t{viewMode === \"calendar\" ? (\n\t\t\t\t<SidebarInput\n\t\t\t\t\tname=\"monthCount\"\n\t\t\t\t\tlabel=\"Months to view\"\n\t\t\t\t\tinlineLabel={true}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tvalue={monthCount}\n\t\t\t\t\t\tonChange={handleMonthCountChange}\n\t\t\t\t\t\tclassName=\"mini\"\n\t\t\t\t\t/>\n\t\t\t\t</SidebarInput>\n\t\t\t) : null}\n\t\t\t<SidebarInput\n\t\t\t\tname=\"refetch\"\n\t\t\t\tlabel=\"Refetch Posts (not for production)\"\n\t\t\t\tinlineLabel={true}\n\t\t\t>\n\t\t\t\t<button onClick={handleRefetch}>Refetch</button>\n\t\t\t</SidebarInput>\n\t\t</div>\n\t);\n}\n","import React, { useContext, useEffect } from \"react\";\nimport PostList from \"./PostList\";\nimport { routeBase } from \"../lib/utils\";\n\nimport PostsContext from \"../PostsContext\";\n\nexport default function UnscheduledDrafts() {\n\tconst {\n\t\tposts: { unscheduled, refetch },\n\t\tpostsDispatch,\n\t} = useContext(PostsContext);\n\n\tuseEffect(() => {\n\t\tpostsDispatch({\n\t\t\ttype: \"REFETCH\",\n\t\t});\n\t}, [postsDispatch]);\n\n\tuseEffect(() => {\n\t\tlet url = `${routeBase}/unscheduled`;\n\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await fetch(url);\n\t\t\t\tconst data = await res.json();\n\n\t\t\t\tpostsDispatch({\n\t\t\t\t\ttype: \"SET_UNSCHEDULED\",\n\t\t\t\t\tposts: data.posts,\n\t\t\t\t\tunscheduled: true,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(\"REST error\", error.message);\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\t}, [postsDispatch, refetch]);\n\n\treturn (\n\t\t<PostList\n\t\t\tclassName=\"unscheduledDrafts\"\n\t\t\tdate={false}\n\t\t\tposts={unscheduled}\n\t\t\tallowDrag={true}\n\t\t/>\n\t);\n}\n","import React, { useContext, useEffect, useState, useReducer } from \"react\";\nimport SidebarInput from \"./SidebarInput\";\nimport { updateReducer, initialUpdateState } from \"../lib/updatePost\";\nimport {\n\tdateFormat,\n\tisEmptyPost,\n\tfilterStatusList,\n\trouteBase,\n\tfilterUnchangedParams,\n} from \"../lib/utils\";\nimport DatePicker from \"react-datepicker\";\nimport { format, isFuture, isPast, isToday } from \"date-fns\";\nimport { isEmpty } from \"lodash\";\n\nimport PostsContext from \"../PostsContext\";\nimport DragContext from \"../DragContext\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction editPostReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"SET\":\n\t\t\treturn action.post;\n\n\t\tcase \"EDIT\":\n\t\t\tconst { field } = action;\n\t\t\tvar { value } = action;\n\n\t\t\tif (field === \"post_date\") {\n\t\t\t\tvalue = new Date(value);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[field]: value,\n\t\t\t};\n\n\t\tcase \"DATE_CHANGE\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpost_date: action.newDate,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn { state };\n\t}\n}\n\n// TODO Date/time display, add time picker\nexport default function EditPost() {\n\tconst {\n\t\tposts: { currentPost },\n\t\tpostsDispatch,\n\t} = useContext(PostsContext);\n\tconst { draggedPostDispatch } = useContext(DragContext);\n\tconst [editMode, setEditMode] = useState(false);\n\tconst [editPost, editPostDispatch] = useReducer(editPostReducer, {});\n\tconst [updatePost, updatePostDispatch] = useReducer(\n\t\tupdateReducer,\n\t\tinitialUpdateState\n\t);\n\tconst [date, setDate] = useState(new Date());\n\tconst [allowedStatuses, setAllowedStatuses] = useState({});\n\n\tuseEffect(() => {\n\t\tif (editPost.post_date && editPost.post_date !== \"undefined\") {\n\t\t\tsetDate(new Date(editPost.post_date));\n\t\t}\n\n\t\treturn function cleanup() {\n\t\t\tsetDate(new Date());\n\t\t};\n\t}, [editPost.post_date]);\n\n\tuseEffect(() => {\n\t\tlet exclude = [];\n\n\t\tif (editPost.unscheduled === true) {\n\t\t\texclude.push(\"publish\", \"future\");\n\t\t} else if (isFuture(date)) {\n\t\t\texclude.push(\"publish\");\n\t\t} else if (isPast(date)) {\n\t\t\texclude.push(\"future\");\n\t\t}\n\n\t\tconst statusList = filterStatusList(exclude);\n\n\t\tsetAllowedStatuses(statusList);\n\t}, [date, editPost.unscheduled]);\n\n\tuseEffect(() => {\n\t\tif (editMode === true && editPost.id !== currentPost.id) {\n\t\t\tsetEditMode(false);\n\t\t}\n\t}, [editMode, editPost.id, currentPost.id]);\n\n\tuseEffect(() => {\n\t\t// Handle changing post date (i.e. dragging on calendar) while in edit mode\n\t\tif (currentPost.post_date !== editPost.post_date) {\n\t\t\teditPostDispatch({\n\t\t\t\ttype: \"DATE_CHANGE\",\n\t\t\t\tnewDate: currentPost.post_date,\n\t\t\t});\n\t\t}\n\t\t// TODO Figure out a `usePrevious` solution that doesn't require an eslint hack\n\t\t//        (we don't want to re-fire when editPost.post_date changes, so leave it out of deps.\n\t\t//        Also, apparently adding editPost.post_date also borks changing the date in the picker?)\n\t\t//eslint-disable-next-line\n\t}, [currentPost.post_date]);\n\n\t// Handle post updating\n\tuseEffect(() => {\n\t\tif (updatePost.updateNow === true && currentPost.id !== \"undefined\") {\n\t\t\tupdatePostDispatch({\n\t\t\t\ttype: \"UPDATING\",\n\t\t\t});\n\n\t\t\tlet url = `${routeBase}/update/${currentPost.id}`;\n\t\t\tlet postData = {\n\t\t\t\tparams: filterUnchangedParams(updatePost.params, currentPost),\n\t\t\t\tunscheduled: updatePost.unscheduled,\n\t\t\t};\n\n\t\t\tif (isEmpty(postData.params)) {\n\t\t\t\treturn { data: \"Update not necessary.\", error: true };\n\t\t\t}\n\n\t\t\tconst fetchData = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(url, {\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: JSON.stringify(postData),\n\t\t\t\t\t});\n\t\t\t\t\t// const data = await response.json(); // If you need to catch the response...\n\t\t\t\t\tawait response.json();\n\n\t\t\t\t\tdraggedPostDispatch({\n\t\t\t\t\t\ttype: \"END\",\n\t\t\t\t\t});\n\t\t\t\t\tupdatePostDispatch({\n\t\t\t\t\t\ttype: \"COMPLETE\",\n\t\t\t\t\t});\n\t\t\t\t\tpostsDispatch({\n\t\t\t\t\t\ttype: \"SET_CURRENTPOST\",\n\t\t\t\t\t\tpost: editPost,\n\t\t\t\t\t\tunscheduled: editPost.unscheduled,\n\t\t\t\t\t});\n\n\t\t\t\t\tpostsDispatch({\n\t\t\t\t\t\ttype: \"REFETCH\",\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfetchData();\n\t\t}\n\t}, [\n\t\tcurrentPost,\n\t\teditPost,\n\t\tdraggedPostDispatch,\n\t\tpostsDispatch,\n\t\tupdatePost.params,\n\t\tupdatePost.updateNow,\n\t\tupdatePost.unscheduled,\n\t]);\n\n\tconst editHandler = () => {\n\t\teditPostDispatch({\n\t\t\ttype: \"SET\",\n\t\t\tpost: currentPost,\n\t\t});\n\n\t\tsetEditMode(true);\n\t};\n\n\tconst handleSubmit = () => {\n\t\tupdatePostDispatch({\n\t\t\ttype: \"UPDATE\",\n\t\t\tparams: {\n\t\t\t\tpost_title: editPost.post_title,\n\t\t\t\tpost_date: format(\n\t\t\t\t\tnew Date(editPost.post_date),\n\t\t\t\t\tdateFormat.date\n\t\t\t\t),\n\t\t\t\tpost_status: editPost.post_status,\n\t\t\t},\n\t\t\tunscheduled: editPost.unscheduled,\n\t\t});\n\n\t\tsetEditMode(false);\n\t};\n\n\tconst cancelHandler = () => setEditMode(false);\n\n\tconst handleInputChange = (e) => {\n\t\teditPostDispatch({\n\t\t\ttype: \"EDIT\",\n\t\t\tfield: e.target.name,\n\t\t\tvalue: e.target.value,\n\t\t});\n\t};\n\n\tconst handleStatusChange = (e) => {\n\t\teditPostDispatch({\n\t\t\ttype: \"EDIT\",\n\t\t\tfield: e.target.name,\n\t\t\tvalue: e.target.value,\n\t\t});\n\t};\n\n\tconst handleInputDateChange = (date) => {\n\t\teditPostDispatch({\n\t\t\ttype: \"EDIT\",\n\t\t\tfield: \"post_date\",\n\t\t\tvalue: date,\n\t\t});\n\t};\n\n\tconst renderStatusOptions = (statusList) => {\n\t\treturn Object.keys(statusList).map((status) => (\n\t\t\t<option key={status} value={status}>\n\t\t\t\t{statusList[status].name}\n\t\t\t</option>\n\t\t));\n\t};\n\n\treturn (\n\t\t<div className=\"editPost\">\n\t\t\t{isEmptyPost(currentPost) ? (\n\t\t\t\t<div>\n\t\t\t\t\t{editMode === false ? (\n\t\t\t\t\t\t<div className=\"editPost__buttons__row\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"editPost__buttons__edit\"\n\t\t\t\t\t\t\t\tonClick={editHandler}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tEdit Post\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"editPost__editor\">\n\t\t\t\t\t\t{editMode ? (\n\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\tclassName=\"editPost__editor__form\"\n\t\t\t\t\t\t\t\tonSubmit={handleSubmit}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\tclassName=\"editPost__buttons__save\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"editPost__buttons__cancel\"\n\t\t\t\t\t\t\t\t\tonClick={cancelHandler}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<SidebarInput\n\t\t\t\t\t\t\t\t\tname=\"post_title\"\n\t\t\t\t\t\t\t\t\tlabel=\"Post Title\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tname=\"post_title\"\n\t\t\t\t\t\t\t\t\t\tvalue={editPost.post_title}\n\t\t\t\t\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</SidebarInput>\n\t\t\t\t\t\t\t\t<SidebarInput\n\t\t\t\t\t\t\t\t\tname=\"post_date\"\n\t\t\t\t\t\t\t\t\tlabel=\"Post Date\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{/* TODO prompt to make scheduled when changing an Unscheduled Draft date? */}\n\t\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\t\t\tcloseOnScroll={(e) =>\n\t\t\t\t\t\t\t\t\t\t\te.target === document\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tselected={date}\n\t\t\t\t\t\t\t\t\t\tonChange={handleInputDateChange}\n\t\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\t\tisToday(currentPost.post_date) ||\n\t\t\t\t\t\t\t\t\t\t\tisPast(currentPost.post_date)\n\t\t\t\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</SidebarInput>\n\t\t\t\t\t\t\t\t<SidebarInput\n\t\t\t\t\t\t\t\t\tname=\"post_status\"\n\t\t\t\t\t\t\t\t\tlabel=\"Post Status\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\t\tname=\"post_status\"\n\t\t\t\t\t\t\t\t\t\tonChange={handleStatusChange}\n\t\t\t\t\t\t\t\t\t\tvalue={editPost.post_status}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{renderStatusOptions(allowedStatuses)}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</SidebarInput>\n\t\t\t\t\t\t\t\t<SidebarInput\n\t\t\t\t\t\t\t\t\tname=\"post_thumb\"\n\t\t\t\t\t\t\t\t\tlabel=\"Post Title\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{/* TODO Featured image display/selection */}\n\t\t\t\t\t\t\t\t\t<div className=\"postThumb\">\n\t\t\t\t\t\t\t\t\t\tDreams: Choose/Replace Featured image\n\t\t\t\t\t\t\t\t\t\there\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</SidebarInput>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"editPost__editor__display\">\n\t\t\t\t\t\t\t\t<div className=\"postData\">\n\t\t\t\t\t\t\t\t\t<p>{currentPost.post_title}</p>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t{format(\n\t\t\t\t\t\t\t\t\t\t\tcurrentPost.post_date,\n\t\t\t\t\t\t\t\t\t\t\tdateFormat.date\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>{currentPost.post_status}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"postThumb\">\n\t\t\t\t\t\t\t\t\tFeatured image here\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<small>Click a post to Quick Edit.</small>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport Widget from \"./Widget\";\nimport ViewOptions from \"./ViewOptions\";\nimport UnscheduledDrafts from \"./UnscheduledDrafts\";\nimport EditPost from \"./EditPost\";\n\nexport default function Sidebar() {\n\tconst renderWidget = (title, className, children) => {\n\t\treturn (\n\t\t\t<Widget title={title} className={`widget__${className}`}>\n\t\t\t\t{children}\n\t\t\t</Widget>\n\t\t);\n\t};\n\n\treturn (\n\t\t<aside className=\"calendario__sidebar\">\n\t\t\t{renderWidget(\"View Options\", \"viewOptions\", <ViewOptions />)}\n\t\t\t{renderWidget(\n\t\t\t\t\"Unscheduled Drafts\",\n\t\t\t\t\"unscheduledDrafts\",\n\t\t\t\t<UnscheduledDrafts />\n\t\t\t)}\n\t\t\t{renderWidget(\"Post Area\", \"editPost\", <EditPost />)}\n\t\t</aside>\n\t);\n}\n","import React, { useEffect, useReducer, Profiler } from \"react\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Sidebar from \"./components/Sidebar\";\nimport { useStickyState } from \"./lib/hooks\";\n\nimport PostsContext, { postsReducer, initialPosts } from \"./PostsContext\";\nimport DragContext, { dragReducer, initialDrag } from \"./DragContext\";\nimport ViewContext, { viewReducer, initialViewOptions } from \"./ViewContext\";\n\nimport \"./App.scss\";\n\nexport default function App() {\n\tconst [posts, postsDispatch] = useReducer(postsReducer, initialPosts);\n\tconst [draggedPost, draggedPostDispatch] = useReducer(\n\t\tdragReducer,\n\t\tinitialDrag\n\t);\n\tconst [viewOptions, viewOptionsDispatch] = useReducer(\n\t\tviewReducer,\n\t\tinitialViewOptions\n\t);\n\tconst [view, setView] = useStickyState(\n\t\t{\n\t\t\tviewMode: \"calendar\",\n\t\t\tmonthCount: 1,\n\t\t},\n\t\t\"viewOptions\"\n\t);\n\n\tuseEffect(() => {\n\t\t// Update the context just initially\n\t\tviewOptionsDispatch({\n\t\t\ttype: \"UPDATE_OPTION\",\n\t\t\tmonthCount: view.monthCount,\n\t\t\tviewMode: view.viewMode,\n\t\t});\n\t\t//eslint-disable-next-line\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// Store the values if it's updated elsewhere\n\t\tsetView({\n\t\t\tviewMode: viewOptions.viewMode,\n\t\t\tmonthCount: viewOptions.monthCount,\n\t\t});\n\t}, [setView, viewOptions.viewMode, viewOptions.monthCount]);\n\n\tfunction mainRenderCallback(\n\t\tid,\n\t\tphase,\n\t\tactualDuration,\n\t\tbaseDuration,\n\t\tstartTime,\n\t\tcommitTime,\n\t\tinteractions\n\t) {}\n\n\treturn (\n\t\t<div className={`calendario`}>\n\t\t\t<Header />\n\n\t\t\t<Profiler id=\"Main\" onRender={mainRenderCallback}>\n\t\t\t\t<ViewContext.Provider\n\t\t\t\t\tvalue={{ viewOptions, viewOptionsDispatch }}\n\t\t\t\t>\n\t\t\t\t\t<DragContext.Provider\n\t\t\t\t\t\tvalue={{ draggedPost, draggedPostDispatch }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PostsContext.Provider value={{ posts, postsDispatch }}>\n\t\t\t\t\t\t\t<Main />\n\t\t\t\t\t\t\t<Sidebar />\n\t\t\t\t\t\t</PostsContext.Provider>\n\t\t\t\t\t</DragContext.Provider>\n\t\t\t\t</ViewContext.Provider>\n\t\t\t</Profiler>\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// WP Dashboard admin rendering\nconst reactAppData = window.rhdReactPlugin || {};\nconst { appSelector } = reactAppData;\nconst appAnchorElement = document.querySelector(appSelector);\n\n// dev only\n// const appAnchorElement = document.getElementById(\"root\");\n\nif (appAnchorElement) {\n\tReactDOM.render(\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>,\n\t\tappAnchorElement\n\t);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}